// Generated by gencpp from file autoku_msgs/AccelBrakeSteering.msg
// DO NOT EDIT!


#ifndef AUTOKU_MSGS_MESSAGE_ACCELBRAKESTEERING_H
#define AUTOKU_MSGS_MESSAGE_ACCELBRAKESTEERING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoku_msgs
{
template <class ContainerAllocator>
struct AccelBrakeSteering_
{
  typedef AccelBrakeSteering_<ContainerAllocator> Type;

  AccelBrakeSteering_()
    : accel(0.0)
    , brake(0.0)
    , frontAngle(0.0)  {
    }
  AccelBrakeSteering_(const ContainerAllocator& _alloc)
    : accel(0.0)
    , brake(0.0)
    , frontAngle(0.0)  {
  (void)_alloc;
    }



   typedef double _accel_type;
  _accel_type accel;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _frontAngle_type;
  _frontAngle_type frontAngle;





  typedef boost::shared_ptr< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> const> ConstPtr;

}; // struct AccelBrakeSteering_

typedef ::autoku_msgs::AccelBrakeSteering_<std::allocator<void> > AccelBrakeSteering;

typedef boost::shared_ptr< ::autoku_msgs::AccelBrakeSteering > AccelBrakeSteeringPtr;
typedef boost::shared_ptr< ::autoku_msgs::AccelBrakeSteering const> AccelBrakeSteeringConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator1> & lhs, const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator2> & rhs)
{
  return lhs.accel == rhs.accel &&
    lhs.brake == rhs.brake &&
    lhs.frontAngle == rhs.frontAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator1> & lhs, const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27a9643207b32f2deac0ed64a59c362d";
  }

  static const char* value(const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27a9643207b32f2dULL;
  static const uint64_t static_value2 = 0xeac0ed64a59c362dULL;
};

template<class ContainerAllocator>
struct DataType< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoku_msgs/AccelBrakeSteering";
  }

  static const char* value(const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 accel\n"
"float64 brake\n"
"float64 frontAngle\n"
;
  }

  static const char* value(const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.brake);
      stream.next(m.frontAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelBrakeSteering_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoku_msgs::AccelBrakeSteering_<ContainerAllocator>& v)
  {
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "frontAngle: ";
    Printer<double>::stream(s, indent + "  ", v.frontAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOKU_MSGS_MESSAGE_ACCELBRAKESTEERING_H
