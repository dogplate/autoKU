// Generated by gencpp from file autoku_msgs/WaypointData.msg
// DO NOT EDIT!


#ifndef AUTOKU_MSGS_MESSAGE_WAYPOINTDATA_H
#define AUTOKU_MSGS_MESSAGE_WAYPOINTDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace autoku_msgs
{
template <class ContainerAllocator>
struct WaypointData_
{
  typedef WaypointData_<ContainerAllocator> Type;

  WaypointData_()
    : frame_id()
    , points()
    , yaw()
    , target_velocity()  {
    }
  WaypointData_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , points(_alloc)
    , yaw(_alloc)
    , target_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yaw_type;
  _yaw_type yaw;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_velocity_type;
  _target_velocity_type target_velocity;





  typedef boost::shared_ptr< ::autoku_msgs::WaypointData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoku_msgs::WaypointData_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointData_

typedef ::autoku_msgs::WaypointData_<std::allocator<void> > WaypointData;

typedef boost::shared_ptr< ::autoku_msgs::WaypointData > WaypointDataPtr;
typedef boost::shared_ptr< ::autoku_msgs::WaypointData const> WaypointDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoku_msgs::WaypointData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoku_msgs::WaypointData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoku_msgs::WaypointData_<ContainerAllocator1> & lhs, const ::autoku_msgs::WaypointData_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.points == rhs.points &&
    lhs.yaw == rhs.yaw &&
    lhs.target_velocity == rhs.target_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoku_msgs::WaypointData_<ContainerAllocator1> & lhs, const ::autoku_msgs::WaypointData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autoku_msgs::WaypointData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoku_msgs::WaypointData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoku_msgs::WaypointData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoku_msgs::WaypointData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoku_msgs::WaypointData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoku_msgs::WaypointData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoku_msgs::WaypointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a75d5cdf1202109913326662e88fdeb";
  }

  static const char* value(const ::autoku_msgs::WaypointData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a75d5cdf1202109ULL;
  static const uint64_t static_value2 = 0x913326662e88fdebULL;
};

template<class ContainerAllocator>
struct DataType< ::autoku_msgs::WaypointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoku_msgs/WaypointData";
  }

  static const char* value(const ::autoku_msgs::WaypointData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoku_msgs::WaypointData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"geometry_msgs/Point[] points\n"
"float64[] yaw\n"
"float64[] target_velocity\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autoku_msgs::WaypointData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoku_msgs::WaypointData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.points);
      stream.next(m.yaw);
      stream.next(m.target_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoku_msgs::WaypointData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoku_msgs::WaypointData_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "target_velocity[]" << std::endl;
    for (size_t i = 0; i < v.target_velocity.size(); ++i)
    {
      s << indent << "  target_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOKU_MSGS_MESSAGE_WAYPOINTDATA_H
